lm(formula = msales ~ . ) -> ling.fx.modelm
summary(ling.fx.modelm)
summary(ling.fx.model)
# Efeito cumulativo dos anúncios sobre as vendas após m períodos
# Ilustração: m de 1 até 50
tibble('m' = seq(0,50,1)) %>%
mutate(adver_coef = ling.fx.modelm$coefficients['adver'],
sales.lag_coef = ling.fx.modelm$coefficients['sales.lag'],
cumfx_m = adver_coef*(1 - sales.lag_coef^m)/(1 - sales.lag_coef),
cumfx_inf = adver_coef/(1 - sales.lag_coef))
# Efeito cumulativo dos anúncios sobre as vendas após m períodos
# Ilustração: m de 1 até 50
tibble('m' = seq(0,50,1)) %>%
mutate(adver_coef = ling.fx.modelm$coefficients['madver'],
sales.lag_coef = ling.fx.modelm$coefficients['msales.lag'],
cumfx_m = adver_coef*(1 - sales.lag_coef^m)/(1 - sales.lag_coef),
cumfx_inf = adver_coef/(1 - sales.lag_coef))
tibble('m' = seq(0,50,1)) %>%
mutate(adver_coef = ling.fx.modelm$coefficients['madver'],
sales.lag_coef = ling.fx.modelm$coefficients['msales.lag']
)
summary(ling.fx.modelm)
# Efeito cumulativo dos anúncios sobre as vendas após m períodos
# Ilustração: m de 1 até 50
tibble('m' = seq(0,50,1)) %>%
mutate(adver_coef = ling.fx.modelm$coefficients['madv'],
sales.lag_coef = ling.fx.modelm$coefficients['msales.lag'],
cumfx_m = adver_coef*(1 - sales.lag_coef^m)/(1 - sales.lag_coef),
cumfx_inf = adver_coef/(1 - sales.lag_coef))
ling.fx.modelm$coefficients['madv']
# Efeito cumulativo dos anúncios sobre as vendas após m períodos
# Ilustração: m de 1 até 50
tibble('m' = seq(0,50,1)) %>%
mutate(adver_coef = ling.fx.modelm$coefficients['madv'],
sales.lag_coef = ling.fx.modelm$coefficients['msales.lag'],
cumfx_m = adver_coef*(1 - sales.lag_coef^m)/(1 - sales.lag_coef),
cumfx_inf = adver_coef/(1 - sales.lag_coef))
# 3.3. Lingering Effects: tempo necessário para obter 90% dos efeitos dos anúncios (em meses => x12)
# sales.lag significativo => Tempo necessário para obter 90% dos efeitos dos anúncios: m = log(1-0.9)/log(coef(sales.lag))
tibble('adver.fx_prct' = seq(0,1,0.1)) %>%
mutate(sales.lag_coef = ling.fx.modelm$coefficients['msales.lag'],
time.to.fx_years = log(1-adver.fx_prct)/log(sales.lag_coef),
time.to.fx_months = 12*time.to.fx_years)
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
ano = as.numeric(ano),
mes = substr(mes, 0, -4))
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
ano = as.numeric(ano),
mes = substr(mes, , -4))
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
ano = as.numeric(ano),
mes = str_subset(mes, ano, negate = T))
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_subset(mes, ano, negate = T),
ano = as.numeric(ano))
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_subset(mes, ano),
ano = as.numeric(ano))
df.paldam %>%
mutate(mes = separate(mes, sep = 2))
df.paldam %>%
mutate(mes = separate(mes, into = c('mes', 'ano'), sep = 2))
df.paldam %>%
mutate(mes = separate(mes, into = c('mes', 'ano'), sep = c(2,4)))
'19102' - '1910'
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_extract(mes, ano),
ano = as.numeric(ano))
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_extract(mes, -ano),
ano = as.numeric(ano))
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_detect(mes, ano),
ano = as.numeric(ano))
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_remove(mes, ano),
ano = as.numeric(ano))
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_remove(mes, ano),
ano = as.numeric(ano)) %>%
mutate(dummies = case_when(ano >= 1908 & ano <= 1914
~ dum1,
ano >= 1915 & ano <= 1925
~ dum2,
ano >= 1926 & ano <= 1940
~ dum3)) %>%
mutate(msales.lag = lag(msales)) %>%
pivot_wider(id_cols = period,
names_from = dummies,
values_from = mes)
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_remove(mes, ano),
ano = as.numeric(ano)) %>%
mutate(dummies = case_when(ano >= 1908 & ano <= 1914
~ 'dum1',
ano >= 1915 & ano <= 1925
~ 'dum2',
ano >= 1926 & ano <= 1940
~ 'dum3')) %>%
mutate(msales.lag = lag(msales)) %>%
pivot_wider(id_cols = period,
names_from = dummies,
values_from = mes)
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_remove(mes, ano),
ano = as.numeric(ano)) %>%
mutate(dummies = case_when(ano >= 1908 & ano <= 1914
~ 'dum1',
ano >= 1915 & ano <= 1925
~ 'dum2',
ano >= 1926 & ano <= 1940
~ 'dum3')) %>%
mutate(msales.lag = lag(msales)) %>%
pivot_wider(id_cols = period,
names_from = dummies,
values_from = mes,
values_fill = 0)
df.paldam %>%
mutate(ano = substr(mes, 0, 4),
mes = str_remove(mes, ano),
ano = as.numeric(ano)) %>%
mutate(dummies = case_when(ano >= 1908 & ano <= 1914
~ 'dum1',
ano >= 1915 & ano <= 1925
~ 'dum2',
ano >= 1926 & ano <= 1940
~ 'dum3')) %>%
mutate(msales.lag = lag(msales)) %>%
pivot_wider(id_cols = period,
names_from = dummies,
values_from = mes)
# 1. PACOTES
pkg <- c('quantmod', 'BatchGetSymbols',
'PerformanceAnalytics',
'tidyquant', 'GetDFPData2',
'ggthemes', 'scales', 'glue', 'tidyverse')
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# 2. DADOS
# # Escopo
# Empresas ainda ativas
get_info_companies(cache_folder = tempdir()) %>%
filter(SIT_REG == 'ATIVO') -> bovespa.empresas.ativas.info
# Dados disponíveis (de maneira conveniente) a partir de 2010 (vide http://dados.cvm.gov.br/dados/CIA_ABERTA/)
# => Escopo máximo = 10 anos
# Empresas com mais de 10 anos de atividade
anos.escopo <- 10
ano.passado <- year(today()) - 1
ano.inicial <- ano.passado - anos.escopo
bovespa.empresas.ativas.info %>%
mutate(across(.cols = starts_with('DT'),
.fns = dmy)) %>%
filter(year(today()) - year(DT_CONST) >= anos.escopo) -> bovespa.empresas.ativas.info
# Setores de Atuação
bovespa.empresas.ativas.info %>%
pull(SETOR_ATIV) %>% unique(.) -> setores
# Teste: Setores com mais de 4 empresas
bovespa.empresas.ativas.info %>%
group_by(SETOR_ATIV) %>%
tally(.) %>%
filter(n >= 4) %>%
arrange(n) %>%
pull(SETOR_ATIV) -> setores.teste
# 1 Setor aleatório
setores.teste %>%
sample(1) -> setor.teste
# 4 Companhias aleatórias
bovespa.empresas.ativas.info %>%
filter(SETOR_ATIV == setor.teste) %>%
pull(CD_CVM) %>% sample(4) %>%
get_dfp_data(first_year = ano.inicial,
last_year = ano.passado,
type_docs = c('DRE', 'BPA', 'BPP', 'DFC_MD'),
type_format = 'con',
use_memoise = T,
cache_folder = tempdir()) -> teste
lapply(teste, function(df){
df %>%
# CNPJ e Código da CVM são sempre os mesmos
group_by(CD_CVM, CNPJ_CIA) %>%
# Toma-se o nome mais recente para atualizar os demais
mutate(DENOM_CIA = DENOM_CIA[which.max(DT_FIM_EXERC)])}) -> teste
# If MIL => Multiplicar valores das contas por mil
# Obs: checar depois se existem outras escalas além de milhares de R$
lapply(teste, function(df){
df %>%
mutate(VL_CONTA = case_when(ESCALA_MOEDA == 'MIL'
~ 1000*VL_CONTA,
TRUE ~ VL_CONTA)) %>%
select(-ESCALA_MOEDA)
#   group_by(ESCALA_MOEDA) %>%
#   tally(.)
}) -> teste
# Remover colunas indesejadas + adicionar o Nível de especificidade das contas
lapply(teste, function(df){
df %>%
mutate(LVL_CONTA = str_count(CD_CONTA, '\\.')) %>% # Nível de especificidade das contas
select(CNPJ_CIA, CD_CVM, DENOM_CIA, # ID Companhia
DT_REFER, DT_INI_EXERC, DT_FIM_EXERC, # Datas
GRUPO_DFP, CD_CONTA, LVL_CONTA, DS_CONTA, VL_CONTA) # Contas e Valores
}) -> teste
teste$`DF Consolidado - Demonstração do Resultado`$DS_CONTA %>% levels(.)
teste$`DF Consolidado - Demonstração do Resultado`$DS_CONTA %>% pull(.)
teste$`DF Consolidado - Demonstração do Resultado`$DS_CONTA
teste$`DF Consolidado - Demonstração do Resultado`$DS_CONTA %>% unique()
teste$`DF Consolidado - Demonstração do Resultado` %>% View(.)
teste$`DF Consolidado - Demonstração do Resultado` %>% View(.)
# Dataframe Final: Girar em valores das contas (wide) + Nível de especificidade das contas
lapply(teste, function(df, nivel_especificidade = 1){
df %>%
filter(LVL_CONTA <= nivel_especificidade) %>% # apenas as contas dentro do nivel de especificididade indicado
select(-LVL_CONTA) %>% # remoção do nível de especificidade para facilitar operações com o df
pivot_wider(names_from = c(CD_CONTA, DS_CONTA),
values_from = VL_CONTA,
names_sort = T) # cada conta = uma coluna
}) -> teste
# 3. ALGORITMOS DE VALUATION
# 4. VALUATION SETORIAL
# 5. VISUALIZAÇÕES DIVERSAS
# Exemplo
teste$`DF Consolidado - Demonstração do Resultado` %>%
rename(Ano = DT_FIM_EXERC,
EBITDA = `3.05_Resultado Antes do Resultado Financeiro e dos Tributos`) %>%
ggplot(aes(x = Ano,
y = EBITDA)) +
geom_line(size = 1.2) +
facet_wrap(facets = vars(DENOM_CIA)) +
scale_y_continuous(labels = scales::label_dollar(prefix = 'R$',
suffix = ' Bi',
scale = 1/1000000000)) +
labs(title = glue('EBITDA (R$ Bi, {ano.inicial}-{ano.passado})'),
caption = 'Fonte: CVM (dados importados com o pacote GetDFPData2).') +
ggthemes::theme_economist()
# 1. PACOTES
pkg <- c('sandwich', 'lmtest', 'stargazer', 'rgdal', 'REndo', 'systemfit', 'ivreg',
'geobr', 'gghighlight', 'ggridges', 'ggthemes', 'viridis', 'patchwork', 'naniar', 'scales',
'plyr', 'glue', 'tidyverse')
# 1. PACOTES
pkg <- c('sandwich', 'lmtest', 'stargazer', 'rgdal', 'REndo', 'systemfit', 'ivreg', 'np',
'geobr', 'gghighlight', 'ggridges', 'ggthemes', 'viridis', 'patchwork', 'naniar', 'scales',
'plyr', 'glue', 'tidyverse')
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
select <- dplyr::select
mutate <- dplyr::mutate
summarise <- dplyr::summarise
# 3. DADOS
# 3.1. LINK / ARQUIVO
consumo.file <- 'C:/Users/Sony/Downloads/consumo.csv'
individuos.file <- 'C:/Users/Sony/Downloads/individuos.csv'
consumo.df <- read.csv(consumo.file,
sep = ';')
individuos.df <- read.csv(individuos.file,
sep = ';')
pof.agg <- function(individuos = individuos.df,
consumo = consumo.df,
faixas.etarias,
sexo = T){
individuos %>%
transmute(cod_rel_pess_refe_uc = case_when(cod_rel_pess_refe_uc == 1 ~ 'num_pessoa.ref',
cod_rel_pess_refe_uc == 2 ~ 'num_conjuge',
cod_rel_pess_refe_uc == 3 ~ 'num_filhos',
cod_rel_pess_refe_uc == 4 ~ 'num_outros.parentes',
cod_rel_pess_refe_uc == 5 ~ 'num_agregados',
cod_rel_pess_refe_uc == 6 ~ 'num_pensionistas',
cod_rel_pess_refe_uc == 7 ~ 'num_empregados.dom',
cod_rel_pess_refe_uc == 8 ~ 'num_parentes.empregados'),
cod_uf = cod_uf, num_seq = num_seq,
num_dv = num_dv, cod_domc = cod_domc,
num_ext_renda = num_ext_renda,
fator_expansao1 = fator_expansao1,
fator_expansao2 = fator_expansao2) %>%
pivot_wider(id_cols = c(cod_uf, num_seq, num_dv, cod_domc,
num_ext_renda, fator_expansao1, fator_expansao2),
names_from = cod_rel_pess_refe_uc,
values_from = 1,
values_fn = length,
values_fill = 0) -> individuos.agg_parentesco
if(sexo == T)
individuos %>%
transmute(cod_sexo = case_when(cod_sexo == 1 ~ 'Homens',
cod_sexo == 2 ~ 'Mulheres'),
idade = cut(idade_anos,
breaks = faixas.etarias,
include.lowest = T,
right = T,
na.rm = T),
cod_uf = cod_uf, num_seq = num_seq,
num_dv = num_dv, cod_domc = cod_domc,
num_ext_renda = num_ext_renda,
fator_expansao1 = fator_expansao1,
fator_expansao2 = fator_expansao2) %>%
pivot_wider(#names_from = idade,
names_from = c(cod_sexo, idade),
# names_glue = '{idade} anos',
names_glue = '{cod_sexo}: {idade} anos',
names_sort = T,
values_from = 1,
values_fn = length,
values_fill = 0) -> individuos.agg_sexo.idade
else
individuos %>%
transmute(idade = cut(idade_anos,
breaks = faixas.etarias,
include.lowest = T,
right = T,
na.rm = T),
cod_uf = cod_uf, num_seq = num_seq,
num_dv = num_dv, cod_domc = cod_domc,
num_ext_renda = num_ext_renda,
fator_expansao1 = fator_expansao1,
fator_expansao2 = fator_expansao2) %>%
pivot_wider(names_from = idade,
names_glue = '{idade} anos',
names_sort = T,
values_from = 1,
values_fn = length,
values_fill = 0) -> individuos.agg_sexo.idade
# GERAL
full_join(individuos.agg_parentesco,
individuos.agg_sexo.idade,
by = c('cod_uf', 'num_seq', 'num_dv', 'cod_domc',
'num_ext_renda', 'fator_expansao1', 'fator_expansao2')) -> individuos.agg
# CATEGORIAS ORÇAMENTÁRIAS
id_despesas <- list(alimentacao = 'da',
moradia = 'dd02',
vestuario = 'dd03',
transporte = 'dd04',
higiene = 'dd05',
saude = c('dd06', 'dd6'),
educacao = 'dd07',
lazer = 'dd08',
fumo = 'dd09',
servicos.pessoais = 'dd10',
despesas.diversas = 'dd11',
impostos_previdencia_doacoes = 'dd12',
imoveis_investimentos = 'dd13',
empresimos = 'dd14',
var_ativo_passivo = 'vvp')
id_take.out <- c('da21', 'da22', 'da23', 'da24',
'da25', 'da28', 'da29')
id_lanche.escolar <- 'da27'
id_vestuario_infantil <- 'dd033'
id_vestuario_homem.mulher <- c('dd031', 'dd032')
id_bebidas_alcoolicas <- 'da26'
id_jogos_apostas <- 'dd111'
id_receitas <- 're'
# CONSUMO AGREGADO
consumo %>%
transmute(despesas.alimentacao = rowSums(select(.,contains(id_despesas$alimentacao)), na.rm = T),
despesas.alimentacao.fora = rowSums(select(.,contains(id_take.out)), na.rm = T),
despesas.alimentacao.lanche.escolar = rowSums(select(.,contains(id_lanche.escolar)), na.rm = T),
despesas.moradia = rowSums(select(.,contains(id_despesas$moradia)), na.rm = T),
despesas.vestuario = rowSums(select(.,contains(id_despesas$vestuario)), na.rm = T),
despesas.transporte = rowSums(select(.,contains(id_despesas$transporte)), na.rm = T),
despesas.higiene = rowSums(select(.,contains(id_despesas$higiene)), na.rm = T),
despesas.saude = rowSums(select(.,contains(id_despesas$saude)), na.rm = T),
despesas.educacao = rowSums(select(.,contains(id_despesas$educacao)), na.rm = T),
despesas.lazer = rowSums(select(.,contains(id_despesas$lazer)), na.rm = T),
despesas.fumo = rowSums(select(.,contains(id_despesas$fumo)), na.rm = T),
despesas.servicos.pessoais = rowSums(select(.,contains(id_despesas$servicos.pessoais)), na.rm = T),
despesas.diversas = rowSums(select(.,contains(id_despesas$despesas.diversas)), na.rm = T),
despesas.impostos_previdencia_doacoes = rowSums(select(.,contains(id_despesas$impostos_previdencia_doacoes)), na.rm = T),
despesas.imoveis_investimentos = rowSums(select(.,contains(id_despesas$imoveis_investimentos)), na.rm = T),
despesas.empresimos = rowSums(select(.,contains(id_despesas$empresimos)), na.rm = T),
despesas.var_ativo_passivo = rowSums(select(.,contains(id_despesas$var_ativo_passivo)), na.rm = T),
despesas.totais = rowSums(select(.,contains(as.character(unlist(id_despesas)))), na.rm = T),
despesas.totais.nao.monetaria = rowSums(select(.,contains('nm')), na.rm = T),
# Para o método de Rothbarth
despesas.vestuario_infantil = rowSums(select(.,contains(id_vestuario_infantil)), na.rm = T),
despesas.vestuario_homem.mulher = rowSums(select(.,contains(id_vestuario_homem.mulher)), na.rm = T),
despesas.vestuario_adulto = ifelse((despesas.vestuario - despesas.vestuario_infantil < 0),
0, (despesas.vestuario - despesas.vestuario_infantil)),
despesas.bebidas_alcoolicas = rowSums(select(.,contains(id_bebidas_alcoolicas)), na.rm = T),
despesas.jogos_apostas = rowSums(select(.,contains(id_jogos_apostas)), na.rm = T),
receitas.totais = rowSums(select(.,contains(id_receitas)), na.rm = T),
cod_uf = cod_uf,
num_seq = num_seq,
num_dv = num_dv,
cod_domc = cod_domc,
id_dom = id_dom,
urbano = ifelse(urbano == 0, 'Rural', 'Urbano'),
urbano = factor(urbano),
# Estratificação Social (renda per capita)
classe.social = cut(receitas.totais,
quantile(receitas.totais,
probs = seq(0,1,0.2),
na.rm = T),
labels = c('Primeiro Quinto (Renda per capita)',
'Segundo Quinto (Renda per capita)',
'Terceiro Quinto (Renda per capita)',
'Quarto Quinto (Renda per capita)',
'Quinto Quinto (Renda per capita)'),
include.lowest = T),
qtd_morador_domc = qtd_morador_domc,
renda_bruta_monetaria = renda_bruta_monetaria,
renda_bruta_nao_monetaria = renda_bruta_nao_monetaria,
renda_total = renda_total) %>%
mutate(across(.cols = contains('despesas.'), ~ . / 12,
.names = '{.col}.mensal')) %>%
mutate(across(.cols = contains('receitas.'), ~ . / 12,
.names = '{.col}.mensal')) %>%
mutate(across(.cols = contains('.mensal'), ~ . / qtd_morador_domc,
.names = '{.col}.per_capita')) -> consumo.agg
# CONSUMO AGREGADO POR DOMICÍLIO
full_join(individuos.agg, consumo.agg,
by = c('cod_uf', 'num_seq',
'num_dv', 'cod_domc')) %>%
mutate(UF.sigla = case_when(cod_uf == 11	~ 'RO', cod_uf == 12	~ 'AC',
cod_uf == 13	~ 'AM', cod_uf == 14	~ 'RR',
cod_uf == 15	~ 'PA', cod_uf == 16	~ 'AP',
cod_uf == 17	~ 'TO', cod_uf == 21 ~ 'MA',
cod_uf == 22 ~ 'PI', cod_uf == 23 ~ 'CE',
cod_uf == 24 ~ 'RN', cod_uf == 25 ~ 'PB',
cod_uf == 26 ~ 'PE', cod_uf == 27 ~ 'AL',
cod_uf == 28 ~ 'SE', cod_uf == 29 ~ 'BA',
cod_uf == 31 ~ 'MG', cod_uf == 32 ~ 'ES',
cod_uf == 33 ~ 'RJ', cod_uf == 35 ~ 'SP',
cod_uf == 41 ~ 'PR', cod_uf == 42 ~ 'SC',
cod_uf == 43 ~ 'RS', cod_uf == 50 ~ 'MS',
cod_uf == 51 ~ 'MT', cod_uf == 52 ~ 'GO',
cod_uf == 53 ~ 'DF'),
UF.sigla = factor(UF.sigla),
UF.nome = case_when(cod_uf == 11	~ 'Rondônia', cod_uf == 12	~ 'Acre',
cod_uf == 13	~ 'Amazonas', cod_uf == 14	~ 'Roraima',
cod_uf == 15	~ 'Pará', cod_uf == 16	~ 'Amapá',
cod_uf == 17	~ 'Tocantins', cod_uf == 21 ~ 'Maranhão',
cod_uf == 22 ~ 'Piauí', cod_uf == 23 ~ 'Ceará',
cod_uf == 24 ~ 'Rio Grande do Norte', cod_uf == 25 ~ 'Paraíba',
cod_uf == 26 ~ 'Pernambuco', cod_uf == 27 ~ 'Alagoas',
cod_uf == 28 ~ 'Sergipe', cod_uf == 29 ~ 'Bahia',
cod_uf == 31 ~ 'Minas Gerais', cod_uf == 32 ~ 'Espírito Santo',
cod_uf == 33 ~ 'Rio de Janeiro', cod_uf == 35 ~ 'São Paulo',
cod_uf == 41 ~ 'Paraná', cod_uf == 42 ~ 'Santa Catarina',
cod_uf == 43 ~ 'Rio Grande do Sul', cod_uf == 50 ~ 'Mato Grosso do Sul',
cod_uf == 51 ~ 'Mato Grosso', cod_uf == 52 ~ 'Goiás',
cod_uf == 53 ~ 'Distrito Federal'),
UF.nome = factor(UF.nome),
regiao = case_when(startsWith(as.character(cod_uf), '1') ~ 'Norte',
startsWith(as.character(cod_uf), '2') ~ 'Nordeste',
startsWith(as.character(cod_uf), '3') ~ 'Sudeste',
startsWith(as.character(cod_uf), '4') ~ 'Sul',
startsWith(as.character(cod_uf), '5') ~ 'Centro-Oeste'),
regiao = factor(regiao),
tipo.familia = paste0('(', (qtd_morador_domc - num_filhos),',',
num_filhos,')')) %>%
arrange(qtd_morador_domc, desc(num_filhos)) %>%
mutate(tipo.familia = factor(tipo.familia, unique(tipo.familia)))
}
faixas.etarias.normais <- c(0, 1, 4, 7, 13, 18, 65, max(individuos.df$idade_anos))
# Adulto e Criança apenas
faixas.etarias.ac <- c(0, 14, max(individuos.df$idade_anos))
# Faixas etárias utilizadas por Vaz (2007)
faixas.etarias.vaz <- c(0, 4, 9, 14, max(individuos.df$idade_anos))
# Faixas etárias utilizadas por Deaton (2018)
faixas.etarias.deaton <- c(0, 4, 9, 14, 54, max(individuos.df$idade_anos))
pof.agg(faixas.etarias = faixas.etarias.ac) -> pof.agg.com_sexo.ac
pof.agg(faixas.etarias = faixas.etarias.vaz) -> pof.agg.com_sexo.vaz
pof.agg(faixas.etarias = faixas.etarias.deaton) -> pof.agg.com_sexo.deaton
pof.agg(faixas.etarias = faixas.etarias.ac, sexo = F) -> pof.agg.sem_sexo.ac
pof.agg(faixas.etarias = faixas.etarias.vaz, sexo = F) -> pof.agg.sem_sexo.vaz
pof.agg(faixas.etarias = faixas.etarias.deaton, sexo = F) -> pof.agg.sem_sexo.deaton
sample.selection <- function(df, regioes = levels(df$regiao),
UF = levels(df$UF.sigla),
rural.urbano = levels(df$urbano),
max.moradores = 7, max.filhos = 4,
max.agregados = 0, max.pensionistas = 0,
max.empregados.dom = 0, max.fam.empregados.dom = 0,
incluir.solteiros = F){
if(incluir.solteiros == T){
df %>%
filter(regiao %in% regioes,
UF.sigla %in% UF,
urbano %in% rural.urbano,
qtd_morador_domc <= max.moradores,
num_filhos <= max.filhos,
num_agregados <= max.agregados,
num_pensionistas <= max.pensionistas,
num_empregados.dom <= max.empregados.dom,
num_parentes.empregados <= max.fam.empregados.dom) %>%
mutate(across(c(regiao, UF.sigla, UF.nome, urbano),
.fns = factor))
}
else
df %>%
filter(regiao %in% regioes,
UF.sigla %in% UF,
urbano %in% rural.urbano,
num_conjuge == 1,
qtd_morador_domc <= max.moradores,
num_filhos <= max.filhos,
num_agregados <= max.agregados,
num_pensionistas <= max.pensionistas,
num_empregados.dom <= max.empregados.dom,
num_parentes.empregados <= max.fam.empregados.dom) %>%
mutate(across(c(regiao, UF.sigla, UF.nome, urbano),
.fns = factor))
}
